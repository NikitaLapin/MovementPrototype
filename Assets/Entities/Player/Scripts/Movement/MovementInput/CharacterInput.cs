//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Entities/Player/Scripts/Movement/MovementInput/CharacterInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterInput"",
    ""maps"": [
        {
            ""name"": ""MovementStateMap"",
            ""id"": ""25b7d76e-7857-469b-8f3d-88ec980bf4b3"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""a81f28e8-ba3d-49b4-8457-ef15103cc8e1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""26d1b1b9-dda2-42ca-8017-a3d98b1ce804"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0ed61019-d770-4eca-b810-13816286342c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD Keyboard"",
                    ""id"": ""6a93ccb8-9fa0-47df-bbfd-4615b9c01290"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d23a8a10-c259-4e2b-8c0a-7003f22b8b13"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""32add35c-f376-4b77-8203-a21a3cad6d17"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b37c9bc-b0f5-4922-98ef-065f6002fcec"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a1c47518-6c27-4882-93c0-9d196594533d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dfbd5cf4-6e36-4b80-a6bb-299cd039183d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""687d8d23-f4fd-48cb-83b2-58b5315814ae"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FightStateMap"",
            ""id"": ""e00f80fe-1817-4919-9c6a-5555127f162d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""c265746e-1787-4f06-b15a-c39a926150de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7ae36d6-a0f8-4d07-8e53-f8f8e0d9e969"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ParkourStateMap"",
            ""id"": ""4c0f6db1-3b2c-4fd5-b62e-9bd1f76e21c7"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6e3e8c00-d892-402a-9a70-b3c08109baad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea2a7c27-4859-4835-8e0a-40a8c9b77d44"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementStateMap
        m_MovementStateMap = asset.FindActionMap("MovementStateMap", throwIfNotFound: true);
        m_MovementStateMap_Walk = m_MovementStateMap.FindAction("Walk", throwIfNotFound: true);
        m_MovementStateMap_Run = m_MovementStateMap.FindAction("Run", throwIfNotFound: true);
        m_MovementStateMap_Jump = m_MovementStateMap.FindAction("Jump", throwIfNotFound: true);
        // FightStateMap
        m_FightStateMap = asset.FindActionMap("FightStateMap", throwIfNotFound: true);
        m_FightStateMap_Newaction = m_FightStateMap.FindAction("New action", throwIfNotFound: true);
        // ParkourStateMap
        m_ParkourStateMap = asset.FindActionMap("ParkourStateMap", throwIfNotFound: true);
        m_ParkourStateMap_Newaction = m_ParkourStateMap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementStateMap
    private readonly InputActionMap m_MovementStateMap;
    private IMovementStateMapActions m_MovementStateMapActionsCallbackInterface;
    private readonly InputAction m_MovementStateMap_Walk;
    private readonly InputAction m_MovementStateMap_Run;
    private readonly InputAction m_MovementStateMap_Jump;
    public struct MovementStateMapActions
    {
        private @CharacterInput m_Wrapper;
        public MovementStateMapActions(@CharacterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_MovementStateMap_Walk;
        public InputAction @Run => m_Wrapper.m_MovementStateMap_Run;
        public InputAction @Jump => m_Wrapper.m_MovementStateMap_Jump;
        public InputActionMap Get() { return m_Wrapper.m_MovementStateMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementStateMapActions set) { return set.Get(); }
        public void SetCallbacks(IMovementStateMapActions instance)
        {
            if (m_Wrapper.m_MovementStateMapActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnWalk;
                @Run.started -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementStateMapActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MovementStateMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MovementStateMapActions @MovementStateMap => new MovementStateMapActions(this);

    // FightStateMap
    private readonly InputActionMap m_FightStateMap;
    private IFightStateMapActions m_FightStateMapActionsCallbackInterface;
    private readonly InputAction m_FightStateMap_Newaction;
    public struct FightStateMapActions
    {
        private @CharacterInput m_Wrapper;
        public FightStateMapActions(@CharacterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_FightStateMap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_FightStateMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FightStateMapActions set) { return set.Get(); }
        public void SetCallbacks(IFightStateMapActions instance)
        {
            if (m_Wrapper.m_FightStateMapActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_FightStateMapActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_FightStateMapActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_FightStateMapActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_FightStateMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public FightStateMapActions @FightStateMap => new FightStateMapActions(this);

    // ParkourStateMap
    private readonly InputActionMap m_ParkourStateMap;
    private IParkourStateMapActions m_ParkourStateMapActionsCallbackInterface;
    private readonly InputAction m_ParkourStateMap_Newaction;
    public struct ParkourStateMapActions
    {
        private @CharacterInput m_Wrapper;
        public ParkourStateMapActions(@CharacterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_ParkourStateMap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_ParkourStateMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ParkourStateMapActions set) { return set.Get(); }
        public void SetCallbacks(IParkourStateMapActions instance)
        {
            if (m_Wrapper.m_ParkourStateMapActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_ParkourStateMapActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_ParkourStateMapActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_ParkourStateMapActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_ParkourStateMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public ParkourStateMapActions @ParkourStateMap => new ParkourStateMapActions(this);
    public interface IMovementStateMapActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IFightStateMapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IParkourStateMapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
